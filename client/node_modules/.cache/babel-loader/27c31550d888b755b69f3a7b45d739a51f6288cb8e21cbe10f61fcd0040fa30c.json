{"ast":null,"code":"module.exports = collect;\nfunction collect(stream) {\n  if (stream._collected) return;\n  if (stream._paused) return stream.on('resume', collect.bind(null, stream));\n  stream._collected = true;\n  stream.pause();\n  stream.on('data', save);\n  stream.on('end', save);\n  var buf = [];\n  function save(b) {\n    if (typeof b === 'string') b = new Buffer(b);\n    if (Buffer.isBuffer(b) && !b.length) return;\n    buf.push(b);\n  }\n  stream.on('entry', saveEntry);\n  var entryBuffer = [];\n  function saveEntry(e) {\n    collect(e);\n    entryBuffer.push(e);\n  }\n  stream.on('proxy', proxyPause);\n  function proxyPause(p) {\n    p.pause();\n  }\n\n  // replace the pipe method with a new version that will\n  // unlock the buffered stuff.  if you just call .pipe()\n  // without a destination, then it'll re-play the events.\n  stream.pipe = function (orig) {\n    return function (dest) {\n      // console.error(' === open the pipes', dest && dest.path)\n\n      // let the entries flow through one at a time.\n      // Once they're all done, then we can resume completely.\n      var e = 0;\n      (function unblockEntry() {\n        var entry = entryBuffer[e++];\n        // console.error(\" ==== unblock entry\", entry && entry.path)\n        if (!entry) return resume();\n        entry.on('end', unblockEntry);\n        if (dest) dest.add(entry);else stream.emit('entry', entry);\n      })();\n      function resume() {\n        stream.removeListener('entry', saveEntry);\n        stream.removeListener('data', save);\n        stream.removeListener('end', save);\n        stream.pipe = orig;\n        if (dest) stream.pipe(dest);\n        buf.forEach(function (b) {\n          if (b) stream.emit('data', b);else stream.emit('end');\n        });\n        stream.resume();\n      }\n      return dest;\n    };\n  }(stream.pipe);\n}","map":{"version":3,"names":["module","exports","collect","stream","_collected","_paused","on","bind","pause","save","buf","b","Buffer","isBuffer","length","push","saveEntry","entryBuffer","e","proxyPause","p","pipe","orig","dest","unblockEntry","entry","resume","add","emit","removeListener","forEach"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/fstream/lib/collect.js"],"sourcesContent":["module.exports = collect\n\nfunction collect (stream) {\n  if (stream._collected) return\n\n  if (stream._paused) return stream.on('resume', collect.bind(null, stream))\n\n  stream._collected = true\n  stream.pause()\n\n  stream.on('data', save)\n  stream.on('end', save)\n  var buf = []\n  function save (b) {\n    if (typeof b === 'string') b = new Buffer(b)\n    if (Buffer.isBuffer(b) && !b.length) return\n    buf.push(b)\n  }\n\n  stream.on('entry', saveEntry)\n  var entryBuffer = []\n  function saveEntry (e) {\n    collect(e)\n    entryBuffer.push(e)\n  }\n\n  stream.on('proxy', proxyPause)\n  function proxyPause (p) {\n    p.pause()\n  }\n\n  // replace the pipe method with a new version that will\n  // unlock the buffered stuff.  if you just call .pipe()\n  // without a destination, then it'll re-play the events.\n  stream.pipe = (function (orig) {\n    return function (dest) {\n      // console.error(' === open the pipes', dest && dest.path)\n\n      // let the entries flow through one at a time.\n      // Once they're all done, then we can resume completely.\n      var e = 0\n      ;(function unblockEntry () {\n        var entry = entryBuffer[e++]\n        // console.error(\" ==== unblock entry\", entry && entry.path)\n        if (!entry) return resume()\n        entry.on('end', unblockEntry)\n        if (dest) dest.add(entry)\n        else stream.emit('entry', entry)\n      })()\n\n      function resume () {\n        stream.removeListener('entry', saveEntry)\n        stream.removeListener('data', save)\n        stream.removeListener('end', save)\n\n        stream.pipe = orig\n        if (dest) stream.pipe(dest)\n\n        buf.forEach(function (b) {\n          if (b) stream.emit('data', b)\n          else stream.emit('end')\n        })\n\n        stream.resume()\n      }\n\n      return dest\n    }\n  })(stream.pipe)\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,SAASA,OAAOA,CAAEC,MAAM,EAAE;EACxB,IAAIA,MAAM,CAACC,UAAU,EAAE;EAEvB,IAAID,MAAM,CAACE,OAAO,EAAE,OAAOF,MAAM,CAACG,EAAE,CAAC,QAAQ,EAAEJ,OAAO,CAACK,IAAI,CAAC,IAAI,EAAEJ,MAAM,CAAC,CAAC;EAE1EA,MAAM,CAACC,UAAU,GAAG,IAAI;EACxBD,MAAM,CAACK,KAAK,CAAC,CAAC;EAEdL,MAAM,CAACG,EAAE,CAAC,MAAM,EAAEG,IAAI,CAAC;EACvBN,MAAM,CAACG,EAAE,CAAC,KAAK,EAAEG,IAAI,CAAC;EACtB,IAAIC,GAAG,GAAG,EAAE;EACZ,SAASD,IAAIA,CAAEE,CAAC,EAAE;IAChB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAEA,CAAC,GAAG,IAAIC,MAAM,CAACD,CAAC,CAAC;IAC5C,IAAIC,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,IAAI,CAACA,CAAC,CAACG,MAAM,EAAE;IACrCJ,GAAG,CAACK,IAAI,CAACJ,CAAC,CAAC;EACb;EAEAR,MAAM,CAACG,EAAE,CAAC,OAAO,EAAEU,SAAS,CAAC;EAC7B,IAAIC,WAAW,GAAG,EAAE;EACpB,SAASD,SAASA,CAAEE,CAAC,EAAE;IACrBhB,OAAO,CAACgB,CAAC,CAAC;IACVD,WAAW,CAACF,IAAI,CAACG,CAAC,CAAC;EACrB;EAEAf,MAAM,CAACG,EAAE,CAAC,OAAO,EAAEa,UAAU,CAAC;EAC9B,SAASA,UAAUA,CAAEC,CAAC,EAAE;IACtBA,CAAC,CAACZ,KAAK,CAAC,CAAC;EACX;;EAEA;EACA;EACA;EACAL,MAAM,CAACkB,IAAI,GAAI,UAAUC,IAAI,EAAE;IAC7B,OAAO,UAAUC,IAAI,EAAE;MACrB;;MAEA;MACA;MACA,IAAIL,CAAC,GAAG,CAAC;MACR,CAAC,SAASM,YAAYA,CAAA,EAAI;QACzB,IAAIC,KAAK,GAAGR,WAAW,CAACC,CAAC,EAAE,CAAC;QAC5B;QACA,IAAI,CAACO,KAAK,EAAE,OAAOC,MAAM,CAAC,CAAC;QAC3BD,KAAK,CAACnB,EAAE,CAAC,KAAK,EAAEkB,YAAY,CAAC;QAC7B,IAAID,IAAI,EAAEA,IAAI,CAACI,GAAG,CAACF,KAAK,CAAC,MACpBtB,MAAM,CAACyB,IAAI,CAAC,OAAO,EAAEH,KAAK,CAAC;MAClC,CAAC,EAAE,CAAC;MAEJ,SAASC,MAAMA,CAAA,EAAI;QACjBvB,MAAM,CAAC0B,cAAc,CAAC,OAAO,EAAEb,SAAS,CAAC;QACzCb,MAAM,CAAC0B,cAAc,CAAC,MAAM,EAAEpB,IAAI,CAAC;QACnCN,MAAM,CAAC0B,cAAc,CAAC,KAAK,EAAEpB,IAAI,CAAC;QAElCN,MAAM,CAACkB,IAAI,GAAGC,IAAI;QAClB,IAAIC,IAAI,EAAEpB,MAAM,CAACkB,IAAI,CAACE,IAAI,CAAC;QAE3Bb,GAAG,CAACoB,OAAO,CAAC,UAAUnB,CAAC,EAAE;UACvB,IAAIA,CAAC,EAAER,MAAM,CAACyB,IAAI,CAAC,MAAM,EAAEjB,CAAC,CAAC,MACxBR,MAAM,CAACyB,IAAI,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC;QAEFzB,MAAM,CAACuB,MAAM,CAAC,CAAC;MACjB;MAEA,OAAOH,IAAI;IACb,CAAC;EACH,CAAC,CAAEpB,MAAM,CAACkB,IAAI,CAAC;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}