{"ast":null,"code":"import InvalidError from './InvalidError.js';\nexport default function NumberType(value) {\n  // An XLSX file editing software might not always correctly\n  // detect numeric values in string-type cells. Users won't bother\n  // manually selecting a cell type, so the editing software has to guess\n  // based on the user's input. One can assume that such auto-detection\n  // might not always work.\n  //\n  // So, if a cell is supposed to be a numeric one, convert a string value to a number.\n  //\n  if (typeof value === 'string') {\n    var stringifiedValue = value;\n    value = Number(value);\n    if (String(value) !== stringifiedValue) {\n      throw new InvalidError('not_a_number');\n    }\n  }\n  if (typeof value !== 'number') {\n    throw new InvalidError('not_a_number');\n  }\n  if (isNaN(value)) {\n    throw new InvalidError('invalid_number');\n  } // At this point, `value` can only be a number.\n  //\n  // The global `isFinite()` function filters out:\n  // * NaN\n  // * -Infinity\n  // * Infinity\n  //\n  // All other values pass (including non-numbers).\n  //\n\n  if (!isFinite(value)) {\n    throw new InvalidError('out_of_bounds');\n  }\n  return value;\n}","map":{"version":3,"names":["InvalidError","NumberType","value","stringifiedValue","Number","String","isNaN","isFinite"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/read-excel-file/source/types/Number.js"],"sourcesContent":["import InvalidError from './InvalidError.js'\r\n\r\nexport default function NumberType(value) {\r\n  // An XLSX file editing software might not always correctly\r\n  // detect numeric values in string-type cells. Users won't bother\r\n  // manually selecting a cell type, so the editing software has to guess\r\n  // based on the user's input. One can assume that such auto-detection\r\n  // might not always work.\r\n  //\r\n  // So, if a cell is supposed to be a numeric one, convert a string value to a number.\r\n  //\r\n  if (typeof value === 'string') {\r\n    const stringifiedValue = value\r\n    value = Number(value)\r\n    if (String(value) !== stringifiedValue) {\r\n      throw new InvalidError('not_a_number')\r\n    }\r\n  }\r\n  if (typeof value !== 'number') {\r\n    throw new InvalidError('not_a_number')\r\n  }\r\n  if (isNaN(value)) {\r\n    throw new InvalidError('invalid_number')\r\n  }\r\n  // At this point, `value` can only be a number.\r\n  //\r\n  // The global `isFinite()` function filters out:\r\n  // * NaN\r\n  // * -Infinity\r\n  // * Infinity\r\n  //\r\n  // All other values pass (including non-numbers).\r\n  //\r\n  if (!isFinite(value)) {\r\n    throw new InvalidError('out_of_bounds')\r\n  }\r\n  return value\r\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AAEA,eAAe,SAASC,UAATA,CAAoBC,KAApB,EAA2B;EACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAMC,gBAAgB,GAAGD,KAAzB;IACAA,KAAK,GAAGE,MAAM,CAACF,KAAD,CAAd;IACA,IAAIG,MAAM,CAACH,KAAD,CAAN,KAAkBC,gBAAtB,EAAwC;MACtC,MAAM,IAAIH,YAAJ,CAAiB,cAAjB,CAAN;IACD;EACF;EACD,IAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAM,IAAIF,YAAJ,CAAiB,cAAjB,CAAN;EACD;EACD,IAAIM,KAAK,CAACJ,KAAD,CAAT,EAAkB;IAChB,MAAM,IAAIF,YAAJ,CAAiB,gBAAjB,CAAN;EACD,CArBuC,CAsBxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAI,CAACO,QAAQ,CAACL,KAAD,CAAb,EAAsB;IACpB,MAAM,IAAIF,YAAJ,CAAiB,eAAjB,CAAN;EACD;EACD,OAAOE,KAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}