{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.migrate = exports.readMigrations = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nasync function readMigrations(migrationPath) {\n  const migrationsPath = migrationPath || path.join(process.cwd(), 'migrations');\n  const location = path.resolve(migrationsPath);\n  // Get the list of migration files, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql' }\n  const migrationFiles = await new Promise((resolve, reject) => {\n    fs.readdir(location, (err, files) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(files.map(x => x.match(/^(\\d+).(.*?)\\.sql$/)).filter(x => x !== null).map(x => ({\n        id: Number(x[1]),\n        name: x[2],\n        filename: x[0]\n      })).sort((a, b) => Math.sign(a.id - b.id)));\n    });\n  });\n  if (!migrationFiles.length) {\n    throw new Error(`No migration files found in '${location}'.`);\n  }\n  // Get the list of migrations, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql', up: ..., down: ... }\n  return Promise.all(migrationFiles.map(migration => new Promise((resolve, reject) => {\n    const filename = path.join(location, migration.filename);\n    fs.readFile(filename, 'utf-8', (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n      const [up, down] = data.split(/^--\\s+?down\\b/im);\n      const migrationData = migration;\n      migrationData.up = up.replace(/^-- .*?$/gm, '').trim(); // Remove comments\n      migrationData.down = down ? down.trim() : ''; // and trim whitespaces\n      resolve(migrationData);\n    });\n  })));\n}\nexports.readMigrations = readMigrations;\n/**\n * Migrates database schema to the latest version\n */\nasync function migrate(db, config = {}) {\n  config.force = config.force || false;\n  config.table = config.table || 'migrations';\n  const {\n    force,\n    table\n  } = config;\n  const migrations = config.migrations ? config.migrations : await readMigrations(config.migrationsPath);\n  // Create a database table for migrations meta data if it doesn't exist\n  await db.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`);\n  // Get the list of already applied migrations\n  let dbMigrations = await db.all(`SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`);\n  // Undo migrations that exist only in the database but not in files,\n  // also undo the last migration if the `force` option is enabled.\n  const lastMigration = migrations[migrations.length - 1];\n  for (const migration of dbMigrations.slice().sort((a, b) => Math.sign(b.id - a.id))) {\n    if (!migrations.some(x => x.id === migration.id) || force && migration.id === lastMigration.id) {\n      await db.run('BEGIN');\n      try {\n        await db.exec(migration.down);\n        await db.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n        await db.run('COMMIT');\n        dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n      } catch (err) {\n        await db.run('ROLLBACK');\n        throw err;\n      }\n    } else {\n      break;\n    }\n  }\n  // Apply pending migrations\n  const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n  for (const migration of migrations) {\n    if (migration.id > lastMigrationId) {\n      await db.run('BEGIN');\n      try {\n        await db.exec(migration.up);\n        await db.run(`INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`, migration.id, migration.name, migration.up, migration.down);\n        await db.run('COMMIT');\n      } catch (err) {\n        await db.run('ROLLBACK');\n        throw err;\n      }\n    }\n  }\n}\nexports.migrate = migrate;","map":{"version":3,"names":["fs","require","path","readMigrations","migrationPath","migrationsPath","join","process","cwd","location","resolve","migrationFiles","Promise","reject","readdir","err","files","map","x","match","filter","id","Number","name","filename","sort","a","b","Math","sign","length","Error","all","migration","readFile","data","up","down","split","migrationData","replace","trim","exports","migrate","db","config","force","table","migrations","run","dbMigrations","lastMigration","slice","some","exec","lastMigrationId"],"sources":["../../src/utils/migrate.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}