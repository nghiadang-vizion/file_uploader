{"ast":null,"code":"var binary = require('binary');\nmodule.exports = function (extraField, vars) {\n  var extra;\n  // Find the ZIP64 header, if present.\n  while (!extra && extraField && extraField.length) {\n    var candidateExtra = binary.parse(extraField).word16lu('signature').word16lu('partsize').word64lu('uncompressedSize').word64lu('compressedSize').word64lu('offset').word64lu('disknum').vars;\n    if (candidateExtra.signature === 0x0001) {\n      extra = candidateExtra;\n    } else {\n      // Advance the buffer to the next part.\n      // The total size of this part is the 4 byte header + partsize.\n      extraField = extraField.slice(candidateExtra.partsize + 4);\n    }\n  }\n  extra = extra || {};\n  if (vars.compressedSize === 0xffffffff) vars.compressedSize = extra.compressedSize;\n  if (vars.uncompressedSize === 0xffffffff) vars.uncompressedSize = extra.uncompressedSize;\n  if (vars.offsetToLocalFileHeader === 0xffffffff) vars.offsetToLocalFileHeader = extra.offset;\n  return extra;\n};","map":{"version":3,"names":["binary","require","module","exports","extraField","vars","extra","length","candidateExtra","parse","word16lu","word64lu","signature","slice","partsize","compressedSize","uncompressedSize","offsetToLocalFileHeader","offset"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/unzipper/lib/parseExtraField.js"],"sourcesContent":["var binary = require('binary');\n\nmodule.exports = function(extraField, vars) {\n  var extra;\n  // Find the ZIP64 header, if present.\n  while(!extra && extraField && extraField.length) {\n    var candidateExtra = binary.parse(extraField)\n      .word16lu('signature')\n      .word16lu('partsize')\n      .word64lu('uncompressedSize')\n      .word64lu('compressedSize')\n      .word64lu('offset')\n      .word64lu('disknum')\n      .vars;\n\n    if(candidateExtra.signature === 0x0001) {\n      extra = candidateExtra;\n    } else {\n      // Advance the buffer to the next part.\n      // The total size of this part is the 4 byte header + partsize.\n      extraField = extraField.slice(candidateExtra.partsize + 4);\n    }\n  }\n\n  extra = extra || {};\n\n  if (vars.compressedSize === 0xffffffff)\n    vars.compressedSize = extra.compressedSize;\n\n  if (vars.uncompressedSize  === 0xffffffff)\n    vars.uncompressedSize= extra.uncompressedSize;\n\n  if (vars.offsetToLocalFileHeader === 0xffffffff)\n    vars.offsetToLocalFileHeader= extra.offset;\n\n  return extra;\n};\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9BC,MAAM,CAACC,OAAO,GAAG,UAASC,UAAU,EAAEC,IAAI,EAAE;EAC1C,IAAIC,KAAK;EACT;EACA,OAAM,CAACA,KAAK,IAAIF,UAAU,IAAIA,UAAU,CAACG,MAAM,EAAE;IAC/C,IAAIC,cAAc,GAAGR,MAAM,CAACS,KAAK,CAACL,UAAU,CAAC,CAC1CM,QAAQ,CAAC,WAAW,CAAC,CACrBA,QAAQ,CAAC,UAAU,CAAC,CACpBC,QAAQ,CAAC,kBAAkB,CAAC,CAC5BA,QAAQ,CAAC,gBAAgB,CAAC,CAC1BA,QAAQ,CAAC,QAAQ,CAAC,CAClBA,QAAQ,CAAC,SAAS,CAAC,CACnBN,IAAI;IAEP,IAAGG,cAAc,CAACI,SAAS,KAAK,MAAM,EAAE;MACtCN,KAAK,GAAGE,cAAc;IACxB,CAAC,MAAM;MACL;MACA;MACAJ,UAAU,GAAGA,UAAU,CAACS,KAAK,CAACL,cAAc,CAACM,QAAQ,GAAG,CAAC,CAAC;IAC5D;EACF;EAEAR,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEnB,IAAID,IAAI,CAACU,cAAc,KAAK,UAAU,EACpCV,IAAI,CAACU,cAAc,GAAGT,KAAK,CAACS,cAAc;EAE5C,IAAIV,IAAI,CAACW,gBAAgB,KAAM,UAAU,EACvCX,IAAI,CAACW,gBAAgB,GAAEV,KAAK,CAACU,gBAAgB;EAE/C,IAAIX,IAAI,CAACY,uBAAuB,KAAK,UAAU,EAC7CZ,IAAI,CAACY,uBAAuB,GAAEX,KAAK,CAACY,MAAM;EAE5C,OAAOZ,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}