{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport dropEmptyRows from './dropEmptyRows.js';\nimport dropEmptyColumns from './dropEmptyColumns.js';\nexport default function getData(sheet, options) {\n  var dimensions = sheet.dimensions,\n    cells = sheet.cells; // If the sheet is empty.\n\n  if (cells.length === 0) {\n    return [];\n  }\n  var _dimensions = _slicedToArray(dimensions, 2),\n    leftTop = _dimensions[0],\n    rightBottom = _dimensions[1]; // Don't discard empty rows or columns at the start.\n  // https://github.com/catamphetamine/read-excel-file/issues/102\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\n\n  var colsCount = rightBottom.column;\n  var rowsCount = rightBottom.row; // Initialize spreadsheet data structure.\n\n  var data = new Array(rowsCount);\n  var i = 0;\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount);\n    var j = 0;\n    while (j < colsCount) {\n      data[i][j] = null;\n      j++;\n    }\n    i++;\n  } // Fill in spreadsheet `data`.\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\n  //  maybe that's not correct, this piece code was initially copy-pasted\n  //  from some other library that used `XPath`)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(cells), _step; !(_step = _iterator()).done;) {\n    var cell = _step.value;\n    // Don't discard empty rows or columns at the start.\n    // https://github.com/catamphetamine/read-excel-file/issues/102\n    // const rowIndex = cell.row - leftTop.row\n    // const columnIndex = cell.column - leftTop.column\n    var rowIndex = cell.row - 1;\n    var columnIndex = cell.column - 1; // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\n\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\n      data[rowIndex][columnIndex] = cell.value;\n    }\n  } // Fill in the row map.\n\n  var rowMap = options.rowMap;\n  if (rowMap) {\n    var _i2 = 0;\n    while (_i2 < data.length) {\n      rowMap[_i2] = _i2;\n      _i2++;\n    }\n  } // Drop empty columns or rows.\n\n  data = dropEmptyRows(dropEmptyColumns(data, {\n    onlyTrimAtTheEnd: true\n  }), {\n    onlyTrimAtTheEnd: true,\n    rowMap: rowMap\n  }); // Optionally transform data before applying `schema`.\n\n  if (options.transformData) {\n    data = options.transformData(data); // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\n    //   }\n    // })\n  }\n  return data;\n}","map":{"version":3,"names":["dropEmptyRows","dropEmptyColumns","getData","sheet","options","dimensions","cells","length","_dimensions","_slicedToArray","leftTop","rightBottom","colsCount","column","rowsCount","row","data","Array","i","j","_iterator","_createForOfIteratorHelperLoose","_step","done","cell","value","rowIndex","columnIndex","rowMap","_i2","onlyTrimAtTheEnd","transformData"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/read-excel-file/source/read/getData.js"],"sourcesContent":["import dropEmptyRows from './dropEmptyRows.js'\r\nimport dropEmptyColumns from './dropEmptyColumns.js'\r\n\r\nexport default function getData(sheet, options) {\r\n  const { dimensions, cells } = sheet\r\n\r\n  // If the sheet is empty.\r\n  if (cells.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const [leftTop, rightBottom] = dimensions\r\n\r\n  // Don't discard empty rows or columns at the start.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/102\r\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  const colsCount = rightBottom.column\r\n  const rowsCount = rightBottom.row\r\n\r\n  // Initialize spreadsheet data structure.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  // Fill in spreadsheet `data`.\r\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\r\n  //  maybe that's not correct, this piece code was initially copy-pasted\r\n  //  from some other library that used `XPath`)\r\n  for (const cell of cells) {\r\n    // Don't discard empty rows or columns at the start.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/102\r\n    // const rowIndex = cell.row - leftTop.row\r\n    // const columnIndex = cell.column - leftTop.column\r\n    const rowIndex = cell.row - 1\r\n    const columnIndex = cell.column - 1\r\n    // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\r\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\r\n      data[rowIndex][columnIndex] = cell.value\r\n    }\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap } = options\r\n  if (rowMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  // Drop empty columns or rows.\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowMap }\r\n  )\r\n\r\n  // Optionally transform data before applying `schema`.\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  return data\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA,eAAe,SAASC,OAATA,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;EAC9C,IAAQC,UAAR,GAA8BF,KAA9B,CAAQE,UAAR;IAAoBC,KAApB,GAA8BH,KAA9B,CAAoBG,KAApB,CAD8C,CAG9C;;EACA,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;IACtB,OAAO,EAAP;EACD;EAED,IAAAC,WAAA,GAAAC,cAAA,CAA+BJ,UAA/B;IAAOK,OAAP,GAAAF,WAAA;IAAgBG,WAAhB,GAAAH,WAAA,IAR8C,CAU9C;EACA;EACA;EACA;;EAEA,IAAMI,SAAS,GAAGD,WAAW,CAACE,MAA9B;EACA,IAAMC,SAAS,GAAGH,WAAW,CAACI,GAA9B,CAhB8C,CAkB9C;;EACA,IAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAX;EACA,IAAII,CAAC,GAAG,CAAR;EACA,OAAOA,CAAC,GAAGJ,SAAX,EAAsB;IACpBE,IAAI,CAACE,CAAD,CAAJ,GAAU,IAAID,KAAJ,CAAUL,SAAV,CAAV;IACA,IAAIO,CAAC,GAAG,CAAR;IACA,OAAOA,CAAC,GAAGP,SAAX,EAAsB;MACpBI,IAAI,CAACE,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;MACAA,CAAC;IACF;IACDD,CAAC;EACF,CA7B6C,CA+B9C;EACA;EACA;EACA;;EACA,SAAAE,SAAA,GAAAC,+BAAA,CAAmBf,KAAnB,GAAAgB,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAA0B;IAAA,IAAfC,IAAe,GAAAF,KAAA,CAAAG,KAAA;IACxB;IACA;IACA;IACA;IACA,IAAMC,QAAQ,GAAGF,IAAI,CAACT,GAAL,GAAW,CAA5B;IACA,IAAMY,WAAW,GAAGH,IAAI,CAACX,MAAL,GAAc,CAAlC,CANwB,CAOxB;;IACA,IAAIc,WAAW,GAAGf,SAAd,IAA2Bc,QAAQ,GAAGZ,SAA1C,EAAqD;MACnDE,IAAI,CAACU,QAAD,CAAJ,CAAeC,WAAf,IAA8BH,IAAI,CAACC,KAAnC;IACD;EACF,CA9C6C,CAgD9C;;EACA,IAAQG,MAAR,GAAmBxB,OAAnB,CAAQwB,MAAR;EACA,IAAIA,MAAJ,EAAY;IACV,IAAIC,GAAC,GAAG,CAAR;IACA,OAAOA,GAAC,GAAGb,IAAI,CAACT,MAAhB,EAAwB;MACtBqB,MAAM,CAACC,GAAD,CAAN,GAAYA,GAAZ;MACAA,GAAC;IACF;EACF,CAxD6C,CA0D9C;;EACAb,IAAI,GAAGhB,aAAa,CAClBC,gBAAgB,CAACe,IAAD,EAAO;IAAEc,gBAAgB,EAAE;EAApB,CAAP,CADE,EAElB;IAAEA,gBAAgB,EAAE,IAApB;IAA0BF,MAAM,EAANA;EAA1B,CAFkB,CAApB,CA3D8C,CAgE9C;;EACA,IAAIxB,OAAO,CAAC2B,aAAZ,EAA2B;IACzBf,IAAI,GAAGZ,OAAO,CAAC2B,aAAR,CAAsBf,IAAtB,CAAP,CADyB,CAEzB;IACA;IACA;IACA;IACA;EACD;EAED,OAAOA,IAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}