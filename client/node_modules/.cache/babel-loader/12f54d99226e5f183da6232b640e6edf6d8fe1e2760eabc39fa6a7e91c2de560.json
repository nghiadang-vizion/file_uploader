{"ast":null,"code":"// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\nvar LETTERS = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\nexport function calculateDimensions(cells) {\n  var comparator = function comparator(a, b) {\n    return a - b;\n  };\n  var allRows = cells.map(function (cell) {\n    return cell.row;\n  }).sort(comparator);\n  var allCols = cells.map(function (cell) {\n    return cell.column;\n  }).sort(comparator);\n  var minRow = allRows[0];\n  var maxRow = allRows[allRows.length - 1];\n  var minCol = allCols[0];\n  var maxCol = allCols[allCols.length - 1];\n  return [{\n    row: minRow,\n    column: minCol\n  }, {\n    row: maxRow,\n    column: maxCol\n  }];\n} // Converts a letter coordinate to a digit coordinate.\n// Examples: \"A\" -> 1, \"B\" -> 2, \"Z\" -> 26, \"AA\" -> 27, etc.\n\nfunction columnLettersToNumber(columnLetters) {\n  // `for ... of ...` would require Babel polyfill for iterating a string.\n  var n = 0;\n  var i = 0;\n  while (i < columnLetters.length) {\n    n *= 26;\n    n += LETTERS.indexOf(columnLetters[i]);\n    i++;\n  }\n  return n;\n}\nexport function parseCellCoordinates(coords) {\n  // Coordinate examples: \"AA2091\", \"R988\", \"B1\".\n  coords = coords.split(/(\\d+)/);\n  return [\n  // Row.\n  parseInt(coords[1]),\n  // Column.\n  columnLettersToNumber(coords[0].trim())];\n}","map":{"version":3,"names":["LETTERS","calculateDimensions","cells","comparator","a","b","allRows","map","cell","row","sort","allCols","column","minRow","maxRow","length","minCol","maxCol","columnLettersToNumber","columnLetters","n","i","indexOf","parseCellCoordinates","coords","split","parseInt","trim"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/read-excel-file/source/read/coordinates.js"],"sourcesContent":["// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\r\nconst LETTERS = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\r\n\r\nexport function calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b\r\n  const allRows = cells.map(cell => cell.row).sort(comparator)\r\n  const allCols = cells.map(cell => cell.column).sort(comparator)\r\n  const minRow = allRows[0]\r\n  const maxRow = allRows[allRows.length - 1]\r\n  const minCol = allCols[0]\r\n  const maxCol = allCols[allCols.length - 1]\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ]\r\n}\r\n\r\n// Converts a letter coordinate to a digit coordinate.\r\n// Examples: \"A\" -> 1, \"B\" -> 2, \"Z\" -> 26, \"AA\" -> 27, etc.\r\nfunction columnLettersToNumber(columnLetters) {\r\n  // `for ... of ...` would require Babel polyfill for iterating a string.\r\n  let n = 0\r\n  let i = 0\r\n  while (i < columnLetters.length) {\r\n    n *= 26\r\n    n += LETTERS.indexOf(columnLetters[i])\r\n    i++\r\n  }\r\n  return n\r\n}\r\n\r\nexport function parseCellCoordinates(coords) {\r\n  // Coordinate examples: \"AA2091\", \"R988\", \"B1\".\r\n  coords = coords.split(/(\\d+)/)\r\n  return [\r\n    // Row.\r\n    parseInt(coords[1]),\r\n    // Column.\r\n    columnLettersToNumber(coords[0].trim())\r\n  ]\r\n}"],"mappings":"AAAA;AACA,IAAMA,OAAO,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,EAAuD,GAAvD,EAA4D,GAA5D,EAAiE,GAAjE,EAAsE,GAAtE,EAA2E,GAA3E,EAAgF,GAAhF,EAAqF,GAArF,EAA0F,GAA1F,EAA+F,GAA/F,EAAoG,GAApG,EAAyG,GAAzG,EAA8G,GAA9G,EAAmH,GAAnH,EAAwH,GAAxH,EAA6H,GAA7H,EAAkI,GAAlI,CAAhB;AAEA,OAAO,SAASC,mBAATA,CAA8BC,KAA9B,EAAqC;EAC1C,IAAMC,UAAU,GAAG,SAAbA,UAAaA,CAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAAnB;EACA,IAAMC,OAAO,GAAGJ,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACC,GAAT;EAAA,CAAd,EAA4BC,IAA5B,CAAiCP,UAAjC,CAAhB;EACA,IAAMQ,OAAO,GAAGT,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACI,MAAT;EAAA,CAAd,EAA+BF,IAA/B,CAAoCP,UAApC,CAAhB;EACA,IAAMU,MAAM,GAAGP,OAAO,CAAC,CAAD,CAAtB;EACA,IAAMQ,MAAM,GAAGR,OAAO,CAACA,OAAO,CAACS,MAAR,GAAiB,CAAlB,CAAtB;EACA,IAAMC,MAAM,GAAGL,OAAO,CAAC,CAAD,CAAtB;EACA,IAAMM,MAAM,GAAGN,OAAO,CAACA,OAAO,CAACI,MAAR,GAAiB,CAAlB,CAAtB;EAEA,OAAO,CACL;IAAEN,GAAG,EAAEI,MAAP;IAAeD,MAAM,EAAEI;EAAvB,CADK,EAEL;IAAEP,GAAG,EAAEK,MAAP;IAAeF,MAAM,EAAEK;EAAvB,CAFK,CAAP;AAID,C,CAED;AACA;;AACA,SAASC,qBAATA,CAA+BC,aAA/B,EAA8C;EAC5C;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,OAAOA,CAAC,GAAGF,aAAa,CAACJ,MAAzB,EAAiC;IAC/BK,CAAC,IAAI,EAAL;IACAA,CAAC,IAAIpB,OAAO,CAACsB,OAAR,CAAgBH,aAAa,CAACE,CAAD,CAA7B,CAAL;IACAA,CAAC;EACF;EACD,OAAOD,CAAP;AACD;AAED,OAAO,SAASG,oBAATA,CAA8BC,MAA9B,EAAsC;EAC3C;EACAA,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,OAAb,CAAT;EACA,OAAO;EACL;EACAC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,CAFH;EAGL;EACAN,qBAAqB,CAACM,MAAM,CAAC,CAAD,CAAN,CAAUG,IAAV,EAAD,CAJhB,CAAP;AAMD"},"metadata":{},"sourceType":"module","externalDependencies":[]}