{"ast":null,"code":"module.exports = Extract;\nvar Parse = require('./parse');\nvar Writer = require('fstream').Writer;\nvar path = require('path');\nvar stream = require('stream');\nvar duplexer2 = require('duplexer2');\nvar Promise = require('bluebird');\nfunction Extract(opts) {\n  // make sure path is normalized before using it\n  opts.path = path.resolve(path.normalize(opts.path));\n  var parser = new Parse(opts);\n  var outStream = new stream.Writable({\n    objectMode: true\n  });\n  outStream._write = function (entry, encoding, cb) {\n    if (entry.type == 'Directory') return cb();\n\n    // to avoid zip slip (writing outside of the destination), we resolve\n    // the target path, and make sure it's nested in the intended\n    // destination, or not extract it otherwise.\n    var extractPath = path.join(opts.path, entry.path);\n    if (extractPath.indexOf(opts.path) != 0) {\n      return cb();\n    }\n    const writer = opts.getWriter ? opts.getWriter({\n      path: extractPath\n    }) : Writer({\n      path: extractPath\n    });\n    entry.pipe(writer).on('error', cb).on('close', cb);\n  };\n  var extract = duplexer2(parser, outStream);\n  parser.once('crx-header', function (crxHeader) {\n    extract.crxHeader = crxHeader;\n  });\n  parser.pipe(outStream).on('finish', function () {\n    extract.emit('close');\n  });\n  extract.promise = function () {\n    return new Promise(function (resolve, reject) {\n      extract.on('close', resolve);\n      extract.on('error', reject);\n    });\n  };\n  return extract;\n}","map":{"version":3,"names":["module","exports","Extract","Parse","require","Writer","path","stream","duplexer2","Promise","opts","resolve","normalize","parser","outStream","Writable","objectMode","_write","entry","encoding","cb","type","extractPath","join","indexOf","writer","getWriter","pipe","on","extract","once","crxHeader","emit","promise","reject"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/unzipper/lib/extract.js"],"sourcesContent":["module.exports = Extract;\n\nvar Parse = require('./parse');\nvar Writer = require('fstream').Writer;\nvar path = require('path');\nvar stream = require('stream');\nvar duplexer2 = require('duplexer2');\nvar Promise = require('bluebird');\n\nfunction Extract (opts) {\n  // make sure path is normalized before using it\n  opts.path = path.resolve(path.normalize(opts.path));\n\n  var parser = new Parse(opts);\n\n  var outStream = new stream.Writable({objectMode: true});\n  outStream._write = function(entry, encoding, cb) {\n\n    if (entry.type == 'Directory') return cb();\n\n    // to avoid zip slip (writing outside of the destination), we resolve\n    // the target path, and make sure it's nested in the intended\n    // destination, or not extract it otherwise.\n    var extractPath = path.join(opts.path, entry.path);\n    if (extractPath.indexOf(opts.path) != 0) {\n      return cb();\n    }\n\n    const writer = opts.getWriter ? opts.getWriter({path: extractPath}) :  Writer({ path: extractPath });\n\n    entry.pipe(writer)\n      .on('error', cb)\n      .on('close', cb);\n  };\n\n  var extract = duplexer2(parser,outStream);\n  parser.once('crx-header', function(crxHeader) {\n    extract.crxHeader = crxHeader;\n  });\n\n  parser\n    .pipe(outStream)\n    .on('finish',function() {\n      extract.emit('close');\n    });\n  \n  extract.promise = function() {\n    return new Promise(function(resolve, reject) {\n      extract.on('close', resolve);\n      extract.on('error',reject);\n    });\n  };\n\n  return extract;\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,IAAIC,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;AACtC,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAII,SAAS,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIK,OAAO,GAAGL,OAAO,CAAC,UAAU,CAAC;AAEjC,SAASF,OAAOA,CAAEQ,IAAI,EAAE;EACtB;EACAA,IAAI,CAACJ,IAAI,GAAGA,IAAI,CAACK,OAAO,CAACL,IAAI,CAACM,SAAS,CAACF,IAAI,CAACJ,IAAI,CAAC,CAAC;EAEnD,IAAIO,MAAM,GAAG,IAAIV,KAAK,CAACO,IAAI,CAAC;EAE5B,IAAII,SAAS,GAAG,IAAIP,MAAM,CAACQ,QAAQ,CAAC;IAACC,UAAU,EAAE;EAAI,CAAC,CAAC;EACvDF,SAAS,CAACG,MAAM,GAAG,UAASC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IAE/C,IAAIF,KAAK,CAACG,IAAI,IAAI,WAAW,EAAE,OAAOD,EAAE,CAAC,CAAC;;IAE1C;IACA;IACA;IACA,IAAIE,WAAW,GAAGhB,IAAI,CAACiB,IAAI,CAACb,IAAI,CAACJ,IAAI,EAAEY,KAAK,CAACZ,IAAI,CAAC;IAClD,IAAIgB,WAAW,CAACE,OAAO,CAACd,IAAI,CAACJ,IAAI,CAAC,IAAI,CAAC,EAAE;MACvC,OAAOc,EAAE,CAAC,CAAC;IACb;IAEA,MAAMK,MAAM,GAAGf,IAAI,CAACgB,SAAS,GAAGhB,IAAI,CAACgB,SAAS,CAAC;MAACpB,IAAI,EAAEgB;IAAW,CAAC,CAAC,GAAIjB,MAAM,CAAC;MAAEC,IAAI,EAAEgB;IAAY,CAAC,CAAC;IAEpGJ,KAAK,CAACS,IAAI,CAACF,MAAM,CAAC,CACfG,EAAE,CAAC,OAAO,EAAER,EAAE,CAAC,CACfQ,EAAE,CAAC,OAAO,EAAER,EAAE,CAAC;EACpB,CAAC;EAED,IAAIS,OAAO,GAAGrB,SAAS,CAACK,MAAM,EAACC,SAAS,CAAC;EACzCD,MAAM,CAACiB,IAAI,CAAC,YAAY,EAAE,UAASC,SAAS,EAAE;IAC5CF,OAAO,CAACE,SAAS,GAAGA,SAAS;EAC/B,CAAC,CAAC;EAEFlB,MAAM,CACHc,IAAI,CAACb,SAAS,CAAC,CACfc,EAAE,CAAC,QAAQ,EAAC,YAAW;IACtBC,OAAO,CAACG,IAAI,CAAC,OAAO,CAAC;EACvB,CAAC,CAAC;EAEJH,OAAO,CAACI,OAAO,GAAG,YAAW;IAC3B,OAAO,IAAIxB,OAAO,CAAC,UAASE,OAAO,EAAEuB,MAAM,EAAE;MAC3CL,OAAO,CAACD,EAAE,CAAC,OAAO,EAAEjB,OAAO,CAAC;MAC5BkB,OAAO,CAACD,EAAE,CAAC,OAAO,EAACM,MAAM,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAED,OAAOL,OAAO;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}