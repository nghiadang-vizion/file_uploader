{"ast":null,"code":"import parseDate from '../read/parseDate.js';\nimport InvalidError from './InvalidError.js';\nexport default function DateType(value, _ref) {\n  var properties = _ref.properties;\n\n  // XLSX has no specific format for dates.\n  // Sometimes a date can be heuristically detected.\n  // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n  if (value instanceof Date) {\n    if (isNaN(value.valueOf())) {\n      throw new InvalidError('out_of_bounds');\n    }\n    return value;\n  }\n  if (typeof value === 'number') {\n    if (isNaN(value)) {\n      throw new InvalidError('invalid_number');\n    }\n    if (!isFinite(value)) {\n      throw new InvalidError('out_of_bounds');\n    }\n    var date = parseDate(value, properties);\n    if (isNaN(date.valueOf())) {\n      throw new InvalidError('out_of_bounds');\n    }\n    return date;\n  }\n  throw new InvalidError('not_a_date');\n}","map":{"version":3,"names":["parseDate","InvalidError","DateType","value","_ref","properties","Date","isNaN","valueOf","isFinite","date"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/read-excel-file/source/types/Date.js"],"sourcesContent":["import parseDate from '../read/parseDate.js'\r\nimport InvalidError from './InvalidError.js'\r\n\r\nexport default function DateType(value, { properties }) {\r\n\t// XLSX has no specific format for dates.\r\n  // Sometimes a date can be heuristically detected.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n  if (value instanceof Date) {\r\n    if (isNaN(value.valueOf())) {\r\n      throw new InvalidError('out_of_bounds')\r\n    }\r\n    return value\r\n  }\r\n  if (typeof value === 'number') {\r\n    if (isNaN(value)) {\r\n      throw new InvalidError('invalid_number')\r\n    }\r\n    if (!isFinite(value)) {\r\n      throw new InvalidError('out_of_bounds')\r\n    }\r\n    const date = parseDate(value, properties)\r\n    if (isNaN(date.valueOf())) {\r\n      throw new InvalidError('out_of_bounds')\r\n    }\r\n    return date\r\n  }\r\n  throw new InvalidError('not_a_date')\r\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,eAAe,SAASC,QAATA,CAAkBC,KAAlB,EAAAC,IAAA,EAAyC;EAAA,IAAdC,UAAc,GAAAD,IAAA,CAAdC,UAAc;;EACvD;EACC;EACA;EACA,IAAIF,KAAK,YAAYG,IAArB,EAA2B;IACzB,IAAIC,KAAK,CAACJ,KAAK,CAACK,OAAN,EAAD,CAAT,EAA4B;MAC1B,MAAM,IAAIP,YAAJ,CAAiB,eAAjB,CAAN;IACD;IACD,OAAOE,KAAP;EACD;EACD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAII,KAAK,CAACJ,KAAD,CAAT,EAAkB;MAChB,MAAM,IAAIF,YAAJ,CAAiB,gBAAjB,CAAN;IACD;IACD,IAAI,CAACQ,QAAQ,CAACN,KAAD,CAAb,EAAsB;MACpB,MAAM,IAAIF,YAAJ,CAAiB,eAAjB,CAAN;IACD;IACD,IAAMS,IAAI,GAAGV,SAAS,CAACG,KAAD,EAAQE,UAAR,CAAtB;IACA,IAAIE,KAAK,CAACG,IAAI,CAACF,OAAL,EAAD,CAAT,EAA2B;MACzB,MAAM,IAAIP,YAAJ,CAAiB,eAAjB,CAAN;IACD;IACD,OAAOS,IAAP;EACD;EACD,MAAM,IAAIT,YAAJ,CAAiB,YAAjB,CAAN;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}