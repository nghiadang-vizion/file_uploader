{"ast":null,"code":"import parseCellValue from './parseCellValue.js';\nimport { parseCellCoordinates } from './coordinates.js';\nimport { getCellValue, getCellInlineStringValue } from '../xml/xlsx.js';\nimport { getOuterXml } from '../xml/dom.js'; // Example of a `<c/>`ell element:\n//\n// <c>\n//    <f>string</f> — formula.\n//    <v>string</v> — formula pre-computed value.\n//    <is>\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\n//       <r>\n//          <rPr>\n//            ...\n//          </rPr>\n//          <t>string</t>\n//       </r>\n//       <rPh sb=\"1\" eb=\"1\">\n//          <t>string</t>\n//       </rPh>\n//       <phoneticPr fontId=\"1\"/>\n//    </is>\n//    <extLst>\n//       <ext>\n//          <!--any element-->\n//       </ext>\n//    </extLst>\n// </c>\n//\n\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\n  var coords = parseCellCoordinates(node.getAttribute('r'));\n  var valueElement = getCellValue(sheet, node); // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\n\n  var value = valueElement && valueElement.textContent;\n  var type;\n  if (node.hasAttribute('t')) {\n    type = node.getAttribute('t');\n  }\n  return {\n    row: coords[0],\n    column: coords[1],\n    value: parseCellValue(value, type, {\n      getInlineStringValue: function getInlineStringValue() {\n        return getCellInlineStringValue(sheet, node);\n      },\n      getInlineStringXml: function getInlineStringXml() {\n        return getOuterXml(node);\n      },\n      getStyleId: function getStyleId() {\n        return node.getAttribute('s');\n      },\n      styles: styles,\n      values: values,\n      properties: properties,\n      options: options\n    })\n  };\n}","map":{"version":3,"names":["parseCellValue","parseCellCoordinates","getCellValue","getCellInlineStringValue","getOuterXml","parseCell","node","sheet","xml","values","styles","properties","options","coords","getAttribute","valueElement","value","textContent","type","hasAttribute","row","column","getInlineStringValue","getInlineStringXml","getStyleId"],"sources":["/Users/dangnghia/Documents/vizion/file-uploader/client/node_modules/read-excel-file/source/read/parseCell.js"],"sourcesContent":["import parseCellValue from './parseCellValue.js'\r\n\r\nimport {\r\n  parseCellCoordinates\r\n} from './coordinates.js'\r\n\r\nimport {\r\n  getCellValue,\r\n  getCellInlineStringValue\r\n} from '../xml/xlsx.js'\r\n\r\nimport {\r\n  getOuterXml\r\n} from '../xml/dom.js'\r\n\r\n// Example of a `<c/>`ell element:\r\n//\r\n// <c>\r\n//    <f>string</f> — formula.\r\n//    <v>string</v> — formula pre-computed value.\r\n//    <is>\r\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\r\n//       <r>\r\n//          <rPr>\r\n//            ...\r\n//          </rPr>\r\n//          <t>string</t>\r\n//       </r>\r\n//       <rPh sb=\"1\" eb=\"1\">\r\n//          <t>string</t>\r\n//       </rPh>\r\n//       <phoneticPr fontId=\"1\"/>\r\n//    </is>\r\n//    <extLst>\r\n//       <ext>\r\n//          <!--any element-->\r\n//       </ext>\r\n//    </extLst>\r\n// </c>\r\n//\r\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\r\n  const coords = parseCellCoordinates(node.getAttribute('r'))\r\n\r\n  const valueElement = getCellValue(sheet, node)\r\n\r\n  // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\r\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\r\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\r\n  let value = valueElement && valueElement.textContent\r\n\r\n  let type\r\n  if (node.hasAttribute('t')) {\r\n    type = node.getAttribute('t')\r\n  }\r\n\r\n  return {\r\n    row: coords[0],\r\n    column: coords[1],\r\n    value: parseCellValue(value, type, {\r\n      getInlineStringValue: () => getCellInlineStringValue(sheet, node),\r\n      getInlineStringXml: () => getOuterXml(node),\r\n      getStyleId: () => node.getAttribute('s'),\r\n      styles,\r\n      values,\r\n      properties,\r\n      options\r\n    })\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,qBAA3B;AAEA,SACEC,oBADF,QAEO,kBAFP;AAIA,SACEC,YADF,EAEEC,wBAFF,QAGO,gBAHP;AAKA,SACEC,WADF,QAEO,eAFP,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAATA,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqDC,UAArD,EAAiEC,OAAjE,EAA0E;EACvF,IAAMC,MAAM,GAAGZ,oBAAoB,CAACK,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAD,CAAnC;EAEA,IAAMC,YAAY,GAAGb,YAAY,CAACK,KAAD,EAAQD,IAAR,CAAjC,CAHuF,CAKvF;EACA;EACA;;EACA,IAAIU,KAAK,GAAGD,YAAY,IAAIA,YAAY,CAACE,WAAzC;EAEA,IAAIC,IAAJ;EACA,IAAIZ,IAAI,CAACa,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;IAC1BD,IAAI,GAAGZ,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAP;EACD;EAED,OAAO;IACLM,GAAG,EAAEP,MAAM,CAAC,CAAD,CADN;IAELQ,MAAM,EAAER,MAAM,CAAC,CAAD,CAFT;IAGLG,KAAK,EAAEhB,cAAc,CAACgB,KAAD,EAAQE,IAAR,EAAc;MACjCI,oBAAoB,EAAE,SAAAA,qBAAA;QAAA,OAAMnB,wBAAwB,CAACI,KAAD,EAAQD,IAAR,CAA9B;MAAA,CADW;MAEjCiB,kBAAkB,EAAE,SAAAA,mBAAA;QAAA,OAAMnB,WAAW,CAACE,IAAD,CAAjB;MAAA,CAFa;MAGjCkB,UAAU,EAAE,SAAAA,WAAA;QAAA,OAAMlB,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAN;MAAA,CAHqB;MAIjCJ,MAAM,EAANA,MAJiC;MAKjCD,MAAM,EAANA,MALiC;MAMjCE,UAAU,EAAVA,UANiC;MAOjCC,OAAO,EAAPA;IAPiC,CAAd;EAHhB,CAAP;AAaD"},"metadata":{},"sourceType":"module","externalDependencies":[]}